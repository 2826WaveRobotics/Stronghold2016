// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "ShooterTurretPID.h"
#include "../RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
#include "../Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
ShooterTurretPID::ShooterTurretPID() : PIDSubsystem("ShooterTurretPID", 1.0, 0.0, 0.0) {
	SetAbsoluteTolerance(0.2);
	GetPIDController()->SetContinuous(false);
	LiveWindow::GetInstance()->AddActuator("ShooterTurretPID", "PIDSubsystem Controller", GetPIDController());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	turretMotor = RobotMap::shooterTurretPIDTurretMotor;
	turretAngle = RobotMap::shooterTurretPIDTurretAngle;
	turretPosition1 = RobotMap::shooterTurretPIDTurretPosition1;
	turretPosition2 = RobotMap::shooterTurretPIDTurretPosition2;
	turretPosition3 = RobotMap::shooterTurretPIDTurretPosition3;
	turretCylinder = RobotMap::shooterTurretPIDTurretCylinder;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Use these to get going:
	// SetSetpoint() -  Sets where the PID controller should move the system
	//                  to
	// Enable() - Enables the PID controller.
}

double ShooterTurretPID::ReturnPIDInput() {
	// Return your input value for the PID loop
	// e.g. a sensor, like a potentiometer:
	// yourPot->SetAverageVoltage() / kYourMaxVoltage;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
	return turretAngle->GetAverageVoltage();
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void ShooterTurretPID::UsePIDOutput(double output) {
	// Use output to drive your system, like a motor
	// e.g. yourMotor->Set(output);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	turretMotor->PIDWrite(output);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void ShooterTurretPID::InitDefaultCommand() {

	// Set the default command for a subsystem here.
	// SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void ShooterTurretPID::SetTurretPosition(double position){

}
double ShooterTurretPID::GetTurretPosition(){
	return m_TurretPositionAngle;
}

void ShooterTurretPID::SetTurretCylinder(TurretState state){
	if(state == Turret_Straight){
		turretCylinder.get()->Set(false);
	}
	else if(state == Turret_Angled && Robot::armPID.get()->GetArmAngle() > 4.0){
		turretCylinder.get()->Set(true);
	}

}


