// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "DrivePID.h"
#include "../RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
#include "../Robot.h"
#include "../WaveConstants.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
DrivePID::DrivePID() : PIDSubsystem("DrivePID", 1.0, 0.0, 0.0) {
    SetAbsoluteTolerance(0.1);
    GetPIDController()->SetContinuous(false);
    LiveWindow::GetInstance()->AddActuator("DrivePID", "PIDSubsystem Controller", GetPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

    GetPIDController()->SetInputRange(-180, 180); //range on max we should ever be off
	GetPIDController()->SetOutputRange(-1.0, 1.0); //range on motors
	GetPIDController()->SetAbsoluteTolerance(0); //plus or minus this voltage

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    driveEncoder = RobotMap::drivePIDDriveEncoder;
    leftBack = RobotMap::drivePIDLeftBack;
    rightBack = RobotMap::drivePIDRightBack;
    leftFront = RobotMap::drivePIDLeftFront;
    rightFront = RobotMap::drivePIDRightFront;
    robotDrive41 = RobotMap::drivePIDRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    gyro = RobotMap::m_gyro;

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.
}


void DrivePID::SetDirection(double heading)
{
	GetPIDController()->Disable();
	GetPIDController()->Reset();
	GetPIDController()->SetSetpoint(heading); //we are now facing the same way the entire time
	GetPIDController()->Enable();
}

double DrivePID::ReturnPIDInput() {

	return GetYaw();

	// Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return driveEncoder->PIDGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void DrivePID::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    leftBack->PIDWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void DrivePID::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DrivePID::ResetEncoders() {

	driveEncoder.get()->Reset();
}

double DrivePID::GetDistanceTraveled(){
	return driveEncoder.get()->Get() * wheelCircumference * ticksPerWheel;
}


void DrivePID::DriveStraight(double power) {

	//std::cout << "Drive: Moving straight with power: " << power << std::endl;
	double correction = Robot::drivePID->GetPIDOutput();
	SetSidePower(power + correction, power - correction);
	double degreesOff = GetSetpoint() - GetYaw();
	std::cout << /*"Correction: " << correction << "\tLeft: " <<
				(power + correction) << "\tRight: " << (power - correction) <<*/ "\tYaw: "
			<< GetYaw() << "\tSetpoint: " << GetSetpoint() <<  "\tOff By: " << degreesOff << std::endl;

}

void DrivePID::SetSidePower(double left,double right){
	leftFront->Set(-left);
	leftBack->Set(-left);
	rightBack->Set(right);
	rightFront->Set(right);
}

double DrivePID::GetPIDOutput()
{
	return GetPIDController()->Get();
}

double DrivePID::GetYaw() {
	return gyro.get()->GetYaw();
}

double DrivePID::GetPitch() {
	return gyro.get()->GetPitch();
}

double DrivePID::GetRoll() {
	return gyro.get()->GetRoll();
}
