// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "GrappleClimb.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

GrappleClimb::GrappleClimb() : Subsystem("GrappleClimb") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //climbRelease = RobotMap::grappleClimbClimbRelease;
    grappleRelease = RobotMap::grappleClimbGrappleRelease;

    climbMotor1 = RobotMap::climbMotor1;
    climbMotor2 = RobotMap::climbMotor2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void GrappleClimb::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void GrappleClimb::SetGrappleState(GrappleState state) {
	if(state == Grapple_Release){
	grappleRelease.get()->Set(true);
	}
	else{
		grappleRelease.get()->Set(false);
	}
}

void GrappleClimb::SetClimbState(ClimbState state) {
	switch(state){
				case Climb_Hold:
				default:
					climbMotor1.get()->Set(0);
					climbMotor2.get()->Set(0);
					break;
				case Climb_Deploy:
					climbMotor1.get()->Set(0.9);
					climbMotor2.get()->Set(-0.9);
					break;
				case Climb_Release:
					climbMotor1.get()->Set(-.5);
					climbMotor2.get()->Set(.5);
					break;
		}
}

