// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "SetArmPosition.h"
#include <iostream>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

SetArmPosition::SetArmPosition(double Angle): Command() {
    m_Angle = Angle;
    m_goingUp = false;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void SetArmPosition::Initialize() {
	m_goingUp = (Robot::armPID.get()->GetArmAngle() < m_Angle ? true : false);

	Robot::armPID.get()->SetCommandActive(true);
	//Robot::armPID.get()->SetArmAngle(m_Angle);
}

// Called repeatedly when this Command is scheduled to run
void SetArmPosition::Execute() {
 //to increase angle, motors must be negative
	float currentAngle = Robot::armPID.get()->GetArmAngle();
	double output = 0;
	bool within2Degrees = (2 > fabs(currentAngle - m_Angle));
	bool withinQuarterDegree(.25 > fabs(currentAngle - m_Angle));

	if(withinQuarterDegree){
		output = 0;
	}
	else if(currentAngle < m_Angle)
	{
		//go up
		if(within2Degrees){
			output = -.2;
		}
		else if(currentAngle < 20)
		{
			output = -0.3;
		}
		else
		{
			output = -1.0;
		}
	}
	else if (currentAngle > m_Angle){
		if(within2Degrees){
			output = .2;
		}
		else if (currentAngle < 20)
		{
			output = 0.3;
		}
		else
		{
			output = 1.0;
		}
	}

	Robot::armPID.get()->UsePIDOutput(output);
}

// Make this return true when this Command no longer needs to run execute()
bool SetArmPosition::IsFinished() {
	float currentAngle = Robot::armPID.get()->GetArmAngle();
	if(m_goingUp && (currentAngle > m_Angle))
	{
		return true;
	}
	else if(!m_goingUp && (currentAngle < m_Angle))
	{
		return true;
	}
	else
	{
		return false;
	}


//	if(fabs(currentAngle - m_Angle) < 1.0) //within 1.0 degrees
//	{
//		return true;
//	}
//	else
//	{
//		return false;
//	}
}

// Called once after isFinished returns true
void SetArmPosition::End() {
	Robot::armPID.get()->UsePIDOutput(0);
	Robot::armPID.get()->SetCommandActive(false);
	//Robot::armPID.get()->Disable();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetArmPosition::Interrupted() {

}
