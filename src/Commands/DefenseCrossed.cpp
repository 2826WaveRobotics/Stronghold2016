// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DefenseCrossed.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DefenseCrossed::DefenseCrossed(double TimeDelay): Command() {
    m_TimeDelay = TimeDelay;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DefenseCrossed::Initialize() {
	ZeroPitch = RobotMap::m_gyro.get()->GetPitch();
	ZeroRoll = RobotMap::m_gyro.get()->GetRoll();
	m_timer.Start();
	m_lastTime = m_timer.Get();

}

// Called repeatedly when this Command is scheduled to run
void DefenseCrossed::Execute() {


}

// Make this return true when this Command no longer needs to run execute()
bool DefenseCrossed::IsFinished() {

	double elapsedTime = m_timer.Get() - m_lastTime;

	float CurrentPitch = RobotMap::m_gyro.get()->GetPitch();
	float CurrentRoll = RobotMap::m_gyro.get()->GetRoll();

	bool IsPitchFlat = fabs (ZeroPitch - CurrentPitch) < 0;
	bool IsRollFlat = fabs (ZeroRoll - CurrentRoll) < 0;

	if (elapsedTime>m_initialTimeDelay && IsPitchFlat && IsRollFlat)
	{
		return true;
	}

	else
	{
		return false;
	}
}

// Called once after isFinished returns true
void DefenseCrossed::End() {
	m_timer.Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DefenseCrossed::Interrupted() {

}
