// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "SetHeading.h"
#include "../Robot.h"
#include "../Subsystems/ShooterTurretPID.h"
#include "../AutonomousConstants.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

SetHeading::SetHeading(const double position, bool useGlobal): Command() { //the overall problem MIGHT be that it won't have the POWER to turn ??
    m_newHeading = position;
    m_useGlobal = useGlobal;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    Requires(Robot::drivePID.get());
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void SetHeading::Initialize() {
	if(m_useGlobal) //if this is true, it should always use the value selected on SmartDashboard, no matter what is originally given (?)
		{
			AutonomousConstants autoConst;
			m_newHeading = autoConst.GetHeading();
		}

		Robot::drivePID.get()->SetDrive_Brake(true);
		Robot::drivePID.get()->SetDirection(m_newHeading); //i'm like 63% sure this will work...(the problem might be it's not getting enough power to turn)
		Robot::drivePID.get()->Enable();

		//Robot::armPID.get()->seta

		m_timeout.Reset();
		m_timeout.Start();
}

// Called repeatedly when this Command is scheduled to run
void SetHeading::Execute() {
	//Robot::drivePID->DriveStraight(0.5); //should pivot
}

// Make this return true when this Command no longer needs to run execute()
bool SetHeading::IsFinished() {
	double currentPosition = Robot::drivePID.get()->GetYaw();
	std::cout << "SetHeading is finished: SetPostition = " << Robot::drivePID.get()->GetSetpoint() << ", current = " << Robot::drivePID.get()->ReturnPIDInput() << std::endl;
	if ((fabs (currentPosition - m_newHeading) < 0.5 ) || (m_timeout.HasPeriodPassed(3.0))){
		return true;
	}
	else{
		return false;
	}
}

// Called once after isFinished returns true
void SetHeading::End() {
	Robot::drivePID.get()->Disable();
	Robot::drivePID.get()->SetSidePower(0,0);
	m_timeout.Stop();
	Robot::drivePID.get()->SetDrive_Brake(false);
	std::cout << "SetHeadng End: Actual heading" << Robot::drivePID.get()->GetYaw() << std::endl;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetHeading::Interrupted() {

}
