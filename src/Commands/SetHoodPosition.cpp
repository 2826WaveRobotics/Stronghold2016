// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "SetHoodPosition.h"
#include "../Subsystems/Hood.h"

namespace
{
	enum
	{
		StowToMedium,
		StowToHigh,
		MediumToHigh,
		MediumToStow,
		HighToMedium,
		HighToStow
	};


}


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

SetHoodPosition::SetHoodPosition(): Command() {
	Requires(Robot::hood.get());
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	m_position = Hood_Stow;

}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

SetHoodPosition::SetHoodPosition(HoodPosition position): Command() {
	Requires(Robot::hood.get());
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	m_position = position;
}



// Called just before this Command runs the first time
void SetHoodPosition::Initialize() {
	switch(Robot::hood.get()->GetHoodPosition())
	{
		case Hood_Stow:
		default:
			if(Hood_Medium == m_position)
			{
				m_sequenceNeeded = StowToMedium;
			}
			else if(Hood_High == m_position)
			{
				m_sequenceNeeded = StowToHigh;
			}
			else
			{
				m_sequenceNeeded = MediumToStow;
			}
			break;
		case Hood_Medium:
			if(Hood_Stow == m_position)
			{
				m_sequenceNeeded = MediumToStow;
			}
			else if(Hood_High == m_position)
			{
				m_sequenceNeeded = MediumToHigh;
			}
			else
			{
				m_sequenceNeeded = StowToMedium;
			}
			break;
		case Hood_High:
			if(Hood_Stow == m_position)
			{
				m_sequenceNeeded = HighToStow;
			}
			else if(Hood_Medium == m_position)
			{
				m_sequenceNeeded = HighToMedium;
			}
			else
			{
				m_sequenceNeeded = StowToHigh;
			}
			break;
	}

	m_sequenceStep = 1;
	m_sequenceComplete = false;

//	Robot::hood.get()->setHoodPosition(m_position);
}

// Called repeatedly when this Command is scheduled to run
void SetHoodPosition::Execute() {
	switch(m_sequenceNeeded)
	{
		case StowToMedium:
			switch(m_sequenceStep)
			{
				case 1:
					Robot::hood.get()->setLockPin();
					m_waitTimer.Reset();
					m_waitTimer.Start();
					m_sequenceStep++;
					break;
				case 2:
					if(m_waitTimer.HasPeriodPassed(0.25))
					{
						m_sequenceStep++;
					}
					break;
				case 3:
					Robot::hood.get()->setHoodPosition(Hood_Medium);
					m_sequenceComplete = true;
					break;
			}
			break;
		case StowToHigh:
			switch(m_sequenceStep)
			{
				case 1:
					Robot::hood.get()->unlockPin();
					m_waitTimer.Reset();
					m_waitTimer.Start();
					m_sequenceStep++;
					break;
				case 2:
					if(m_waitTimer.HasPeriodPassed(0.25))
					{
						m_sequenceStep++;
					}
					break;
				case 3:
					Robot::hood.get()->setHoodPosition(Hood_High);
					m_sequenceComplete = true;
					break;
			}
			break;
		case MediumToHigh:
			switch(m_sequenceStep)
			{
				case 1:
					Robot::hood.get()->unlockPin();
					m_waitTimer.Reset();
					m_waitTimer.Start();
					m_sequenceStep++;
					break;
				case 2:
					if(m_waitTimer.HasPeriodPassed(0.15))
					{
						m_sequenceStep++;
					}
					break;
				case 3:
					Robot::hood.get()->setHoodPosition(Hood_High);
					m_sequenceComplete = true;
					break;
			}
			break;
		case MediumToStow:
			Robot::hood.get()->unlockPin();
			Robot::hood.get()->setHoodPosition(Hood_Stow);
			m_sequenceComplete = true;
			break;
		case HighToMedium:
			switch(m_sequenceStep)
			{
				case 1:
					Robot::hood.get()->unlockPin();
					m_waitTimer.Reset();
					m_waitTimer.Start();
					m_sequenceStep++;
					break;
				case 2:
					if(m_waitTimer.HasPeriodPassed(0.25))
					{
						m_sequenceStep++;
					}
					break;
				case 3:
					Robot::hood.get()->setHoodPosition(Hood_Low);
					m_sequenceStep++;
					break;
				case 4:
					if(m_waitTimer.HasPeriodPassed(0.25))
					{
						m_sequenceStep++;
					}
					break;
				case 5:
					Robot::hood.get()->setLockPin();
					m_waitTimer.Reset();
					m_waitTimer.Start();
					m_sequenceStep++;
					break;
				case 6:
					if(m_waitTimer.HasPeriodPassed(0.25))
					{
						m_sequenceStep++;
					}
					break;
				case 7:
					Robot::hood.get()->setHoodPosition(Hood_Medium);
					m_sequenceComplete = true;
					break;
			}
			break;
		case HighToStow:
			switch(m_sequenceStep)
			{
				case 1:
					Robot::hood.get()->unlockPin();
					m_waitTimer.Reset();
					m_waitTimer.Start();
					m_sequenceStep++;
					break;
				case 2:
					if(m_waitTimer.HasPeriodPassed(0.15))
					{
						m_sequenceStep++;
					}
					break;
				case 3:
					Robot::hood.get()->setHoodPosition(Hood_Stow);
					m_sequenceComplete = true;
					break;
			}
			break;
	}
}

// Make this return true when this Command no longer needs to run execute()
bool SetHoodPosition::IsFinished() {
    return m_sequenceComplete;
}

// Called once after isFinished returns true
void SetHoodPosition::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetHoodPosition::Interrupted() {

}
