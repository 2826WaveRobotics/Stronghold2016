// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "SetTurretPosition.h"
#include "../Robot.h"
#include "../Subsystems/ShooterTurretPID.h"
#include "../AutonomousConstants.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

SetTurretPosition::SetTurretPosition(double newHeadAngle, bool useGlobal): Command() {
    m_newTurretAngle = newHeadAngle;
    m_useGlobal = useGlobal;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    Requires(Robot::shooterTurretPID.get());
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void SetTurretPosition::Initialize() {
	if(m_useGlobal)
		{
			AutonomousConstants autoConst;
			m_newTurretAngle = autoConst.GetShooterAngle();
		}

//		Robot::shooterTurretPID.get()->SetTurretPosition(m_newTurretAngle);
		Robot::shooterTurretPID.get()->SetTurretPosition(m_newTurretAngle);

}

// Called repeatedly when this Command is scheduled to run
void SetTurretPosition::Execute() {

}

// Make this return true when this Command no longer needs to run execute()
bool SetTurretPosition::IsFinished() {
	double currentPosition = Robot::shooterTurretPID.get()->GetTurretPosition();
	if (fabs (currentPosition - m_newTurretAngle)< 1.0 ){
		return true;
	}
	else{
		return false;
	}
}

// Called once after isFinished returns true
void SetTurretPosition::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetTurretPosition::Interrupted() {

}
