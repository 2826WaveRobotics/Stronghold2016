// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoChevalDeFrise.h"
#include "Commands/AutoDrawbridge.h"
#include "Commands/AutoLowBar.h"
#include "Commands/AutoMoat.h"
#include "Commands/AutoPortcullis.h"
#include "Commands/AutoRamparts.h"
#include "Commands/AutoRockWall.h"
#include "Commands/AutoRoughTerrain.h"
#include "Commands/AutoSallyPort.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DefenseCrossed.h"
#include "Commands/SetArmPosition.h"
#include "Commands/SetHoodPosition.h"
#include "Commands/SetShooterWheelSpeed.h"
#include "Commands/SetTurretPosition.h"
#include "Commands/FireSequence.h"
#include "Commands/StartingLocation.h"
#include "Commands/SetClimbState.h"
#include "Commands/SetGrappleState.h"
#include "Commands/ButtonWheelSpeed.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    operatorJoystick.reset(new Joystick(1));
    
    operatorStart.reset(new JoystickButton(operatorJoystick.get(), 8));
    //operatorStart->WhenReleased(new AutonomousCommand());
    operatorSelect.reset(new JoystickButton(operatorJoystick.get(), 7));
    //operatorSelect->WhenReleased(new AutonomousCommand());
    operatorRightBumper.reset(new JoystickButton(operatorJoystick.get(), 6));
    operatorRightBumper->WhenReleased(new SetGrappleState(Grapple_Close));
    operatorRightBumper->WhenPressed(new SetGrappleState(Grapple_Open));
    operatorLeftBumper.reset(new JoystickButton(operatorJoystick.get(), 5));
    operatorLeftBumper->WhenPressed(new SetClimbState(Climb_Open));
    operatorLeftBumper->WhenReleased(new SetClimbState(Climb_Close));
    operatorY.reset(new JoystickButton(operatorJoystick.get(), 4));
    operatorY->WhenReleased(new SetHoodPosition(Hood_High));
    operatorX.reset(new JoystickButton(operatorJoystick.get(), 3));
    operatorX->WhenReleased(new SetHoodPosition(Hood_Medium));
    operatorB.reset(new JoystickButton(operatorJoystick.get(), 2));
    operatorB->WhenReleased(new SetHoodPosition(Hood_Low));
    operatorA.reset(new JoystickButton(operatorJoystick.get(), 1));
    operatorA->WhenReleased(new SetHoodPosition(Hood_Stow));
    driverJoystick.reset(new Joystick(0));
    
    driverStart.reset(new JoystickButton(driverJoystick.get(), 8));
//    driverStart->WhenReleased(new AutonomousCommand());
    driverSelect.reset(new JoystickButton(driverJoystick.get(), 7));
//    driverSelect->WhenReleased(new AutonomousCommand());
    driverRightBumper.reset(new JoystickButton(driverJoystick.get(), 6));
//    driverRightBumper->WhenReleased(new AutonomousCommand());
    driverLeftBumper.reset(new JoystickButton(driverJoystick.get(), 5));
//    driverLeftBumper->WhenReleased(new AutonomousCommand());
    driverY.reset(new JoystickButton(driverJoystick.get(), 4));
    driverY->WhenReleased(new ButtonWheelSpeed(Increase_5));
    driverX.reset(new JoystickButton(driverJoystick.get(), 3));
    driverX->WhenReleased(new ButtonWheelSpeed(Decrease_5));
    driverB.reset(new JoystickButton(driverJoystick.get(), 2));
    driverB->WhenReleased(new ButtonWheelSpeed(Increase_1));
    driverA.reset(new JoystickButton(driverJoystick.get(), 1));
    driverA->WhenReleased(new ButtonWheelSpeed(Decrease_1));

    // SmartDashboard Buttons
    SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getDriverJoystick() {
   return driverJoystick;
}

std::shared_ptr<Joystick> OI::getOperatorJoystick() {
   return operatorJoystick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
