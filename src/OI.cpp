// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoChevalDeFrise.h"
#include "Commands/AutoDrawbridge.h"
#include "Commands/AutoLowBar.h"
#include "Commands/AutoMoat.h"
#include "Commands/AutoPortcullis.h"
#include "Commands/AutoRamparts.h"
#include "Commands/AutoRockWall.h"
#include "Commands/AutoRoughTerrain.h"
#include "Commands/AutoSallyPort.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DefenseCrossed.h"
#include "Commands/SetArmPosition.h"
#include "Commands/SetHoodPosition.h"
#include "Commands/SetShooterWheelSpeed.h"
#include "Commands/SetTurretPosition.h"
#include "Commands/FireSequence.h"
#include "Commands/FirePrepSequence.h"
#include "Commands/StartingLocation.h"
#include "Commands/SetClimbState.h"
#include "Commands/SetGrappleState.h"
#include "Commands/ButtonWheelSpeed.h"
#include "Commands/SetHoodPositionSequence.h"
#include "Commands/SetTurretCylinder.h"
#include "Commands/AutoIntake.h"
#include "Commands/Shoot.h"
#include "Commands/SetIntake.h"
#include "Commands/IntakePositionSequence.h"
#include "Commands/LowBarPrep.h"
#include "Commands/AlignSequence.h"
#include "Commands/SetIntakeOut.h"
#include "Commands/ShooterIntake.h"
#include "Commands/SetSecondaryOut.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    operatorJoystick.reset(new Joystick(1));
    
    operatorRightTrigger.reset(new Joystick(3));
    operatorLeftTrigger.reset(new Joystick(2));
  //  operatorStart.reset(new JoystickButton(operatorJoystick.get(), 8));
    operatorSelect.reset(new JoystickButton(operatorJoystick.get(), 7));
    operatorRightBumper.reset(new JoystickButton(operatorJoystick.get(), 6));
    operatorLeftBumper.reset(new JoystickButton(operatorJoystick.get(), 5));
    operatorY.reset(new JoystickButton(operatorJoystick.get(), 4));
    operatorX.reset(new JoystickButton(operatorJoystick.get(), 3));
    operatorB.reset(new JoystickButton(operatorJoystick.get(), 2));
    operatorA.reset(new JoystickButton(operatorJoystick.get(), 1));


    operatorRightBumper->WhenPressed(new FirePrepSequence(Hood_Medium, Turret_Straight, Long_Shot_Straight)); //long straight
    operatorRightBumper->WhenReleased(new FirePrepSequence(Hood_Stow, Turret_Straight, Idle_Shot)); //Default positions, idle shooter speed
    operatorLeftBumper->WhenPressed(new FirePrepSequence(Hood_High, Turret_Straight, Short_Shot)); // short straight
    operatorLeftBumper->WhenReleased(new FirePrepSequence(Hood_Stow, Turret_Straight, Idle_Shot)); //Default positions, idle shooter speed

//    operatorX->WhenPressed(new SetSecondaryOut(true));
//    operatorX->WhenReleased(new SetSecondaryOut(false));
//    operatorA->WhenPressed(new ShooterIntake(true));
//    operatorA->WhenReleased(new ShooterIntake(false));
    operatorSelect->WhenPressed(new SetShooterWheelSpeed(Kill_Shot));

    operatorB->WhenPressed(new SetTurretCylinder(Turret_Angled));

    driverJoystick.reset(new Joystick(0));
    
    driverRightTrigger.reset(new Joystick(3));
    driverLeftTrigger.reset(new Joystick(2));

    driverStart.reset(new JoystickButton(driverJoystick.get(), 8));
    driverSelect.reset(new JoystickButton(driverJoystick.get(), 7));
    driverRightBumper.reset(new JoystickButton(driverJoystick.get(), 6));
    driverLeftBumper.reset(new JoystickButton(driverJoystick.get(), 5));
    driverY.reset(new JoystickButton(driverJoystick.get(), 4));
    driverX.reset(new JoystickButton(driverJoystick.get(), 3));
    driverB.reset(new JoystickButton(driverJoystick.get(), 2));
    driverA.reset(new JoystickButton(driverJoystick.get(), 1));

    driverLeftBumper->WhenPressed(new SetArmPosition(-5));
    driverRightBumper->WhenPressed(new LowBarPrep());


    // SmartDashboard Button
    SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getDriverJoystick() {
   return driverJoystick;
}

std::shared_ptr<Joystick> OI::getOperatorJoystick() {
   return operatorJoystick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
