// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

//solenoids
int hoodcylindershort = 0;
int hoodcylinderlong = 1;
int lockingCylinder = 2;
int turretcylinder = 5; //5 for practice botS
int grapple = 4;
int shooterballrelease = 3; // not using for now
int redLight = 6;
int greenLight = 7;

//analog Inputs
int armAngle = 0;
int shooterTurretAngle = 1;

//digital I/O
int wheelSpeedCounter = 4; //
int ballDetectorSensor = 5;
int lowBarProx1 = 6; //Right
int lowBarProx2 = 7; //Left

int shooterTurretPos1 = 2;
int shooterTurretPos2 = 3;
int shooterTurretPos3 = 13;


//encoders
double wheelDiameter = 6.1; //inches

//PracticeBot and CompBot are defined in RobotMap.h

#ifdef PracticeBot
int CANTalon_drivePIDLeftBack = 1; //coast
int CANTalon_drivePIDLeftFront = 27; //coast
int CANTalon_drivePIDRightBack = 14; //coast
int CANTalon_drivePIDRightFront = 26; //coast
int CANTalon_primaryIntakeMotor = 25; //coast
int CANTalon_secondaryIntakeMotor = 7; //coast
int CANTalon_armMotorLeft = 4; //break
int CANTalon_armMotorRight = 9; //break
int CANTalon_shooterMotor1 = 16; //coast RIGHT
int CANTalon_shooterMotor2 = 17; //coast LEFT
int CANTalon_turretMotor = 2826; //break

int CANTalon_climbMotor1 = 6; //break LEFT
int CANTalon_climbMotor2 = 5; //break RIGHT

double distancePerPulse = ((wheelDiameter * 3.14159) / 128) / 6; // 6:1 gear reduction
#endif


#ifdef CompBot
int CANTalon_drivePIDLeftBack = 39; //break
int CANTalon_drivePIDLeftFront = 40; //break
int CANTalon_drivePIDRightBack = 30; //break
int CANTalon_drivePIDRightFront = 31; //break
int CANTalon_primaryIntakeMotor = 35; //coast
int CANTalon_secondaryIntakeMotor = 36; //coast
int CANTalon_armMotorLeft = 38; //break
int CANTalon_armMotorRight = 32; //break
int CANTalon_shooterMotor1 = 33; //coast RIGHT
int CANTalon_shooterMotor2 = 37; //coast LEFT
int CANTalon_turretMotor = 34; //break

int CANTalon_climbMotor1 = 2826; //dummy
int CANTalon_climbMotor2 = 6282; //dummy

double distancePerPulse = ((wheelDiameter * 3.14159) / 256) / 6;
#endif


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::armPIDArmMotorRight;
std::shared_ptr<CANTalon> RobotMap::armPIDArmMotorLeft;
std::shared_ptr<DigitalInput> RobotMap::armPIDLowBarProx1;
std::shared_ptr<DigitalInput> RobotMap::armPIDLowBarProx2;
std::shared_ptr<Compressor> RobotMap::compressorSubsystemWaveCompressor;
std::shared_ptr<Encoder> RobotMap::drivePIDDriveEncoderRight;
std::shared_ptr<Encoder> RobotMap::drivePIDDriveEncoderLeft;
std::shared_ptr<CANTalon> RobotMap::drivePIDLeftBack;
std::shared_ptr<CANTalon> RobotMap::drivePIDRightBack;
std::shared_ptr<CANTalon> RobotMap::drivePIDLeftFront;
std::shared_ptr<CANTalon> RobotMap::drivePIDRightFront;
std::shared_ptr<RobotDrive> RobotMap::drivePIDRobotDrive41;
std::shared_ptr<Solenoid> RobotMap::hoodShortCylinder;
std::shared_ptr<Solenoid> RobotMap::hoodLongCylinder;
//std::shared_ptr<Solenoid> RobotMap::grappleClimbClimbRelease;
std::shared_ptr<Solenoid> RobotMap::grappleClimbGrappleRelease;
std::shared_ptr<CANTalon> RobotMap::intakeMainIntake;
std::shared_ptr<CANTalon> RobotMap::intakeSecondIntake;
std::shared_ptr<CANTalon> RobotMap::shooterTurretPIDTurretMotor;
std::shared_ptr<AnalogInput> RobotMap::shooterTurretPIDTurretAngle;
std::shared_ptr<DigitalInput> RobotMap::shooterTurretPIDTurretPosition1;
std::shared_ptr<DigitalInput> RobotMap::shooterTurretPIDTurretPosition2;
std::shared_ptr<DigitalInput> RobotMap::shooterTurretPIDTurretPosition3;
std::shared_ptr<CANTalon> RobotMap::shooterWheelPIDShooter1;
std::shared_ptr<Encoder> RobotMap::shooterWheelPIDNoUseEncoder;
std::shared_ptr<Counter> RobotMap::shooterWheelPIDSpeedCounter;
std::shared_ptr<CANTalon> RobotMap::shooterWheelPIDShooter2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

std::shared_ptr<CANTalon> RobotMap::climbMotor1;
std::shared_ptr<CANTalon> RobotMap::climbMotor2;

std::shared_ptr<DigitalInput> RobotMap::intakeBallDetector;
std::shared_ptr<AnalogInput> RobotMap::armPIDArmAngle;
std::shared_ptr<Solenoid> RobotMap::intakeBallRelease;
std::shared_ptr<Solenoid> RobotMap::shooterTurretPIDTurretCylinder;
std::shared_ptr<Solenoid> RobotMap::hoodLockingCylinder;

std::shared_ptr<AHRS> RobotMap::m_gyro;

std::shared_ptr<Solenoid> RobotMap::lightOutput1;
std::shared_ptr<Solenoid> RobotMap::lightOutput2;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    armPIDArmMotorRight.reset(new CANTalon(CANTalon_armMotorRight));
    lw->AddActuator("ArmPID", "ArmMotorRight", armPIDArmMotorRight);
    
    armPIDArmAngle.reset(new AnalogInput(armAngle));
    lw->AddActuator("ArmPID", "ArmAngle", armPIDArmAngle);

    armPIDLowBarProx1.reset(new DigitalInput(lowBarProx1));
    lw->AddSensor("ArmPID", "LowBarProx1", armPIDLowBarProx1);
    
    armPIDLowBarProx2.reset(new DigitalInput(lowBarProx2));
    lw->AddSensor("ArmPID", "LowBarProx2", armPIDLowBarProx2);
    
    compressorSubsystemWaveCompressor.reset(new Compressor(0));
    
    
    drivePIDDriveEncoderRight.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("DrivePID", "DriveEncoderRight", drivePIDDriveEncoderRight);
    drivePIDDriveEncoderRight->SetDistancePerPulse(distancePerPulse);
//    drivePIDDriveEncoderRight->SetPIDSourceType(PIDSourceType::kDisplacement);

    drivePIDDriveEncoderLeft.reset(new Encoder(2, 3, true, Encoder::k4X));
    lw->AddSensor("DrivePID", "DriveEncoderLeft", drivePIDDriveEncoderLeft);
    drivePIDDriveEncoderLeft->SetDistancePerPulse(distancePerPulse);
//    drivePIDDriveEncoderLeft->SetPIDSourceType(PIDSourceType::kDisplacement);
//    drivePIDDriveEncoderLeft->SetReverseDirection(true);

    drivePIDLeftBack.reset(new CANTalon(CANTalon_drivePIDLeftBack));
    lw->AddActuator("DrivePID", "LeftBack", drivePIDLeftBack);
    
    drivePIDRightBack.reset(new CANTalon(CANTalon_drivePIDRightBack));
    lw->AddActuator("DrivePID", "RightBack", drivePIDRightBack);
    
    drivePIDLeftFront.reset(new CANTalon(CANTalon_drivePIDLeftFront));
    lw->AddActuator("DrivePID", "LeftFront", drivePIDLeftFront);
    
    drivePIDRightFront.reset(new CANTalon(CANTalon_drivePIDRightFront));
    lw->AddActuator("DrivePID", "RightFront", drivePIDRightFront);
    
    drivePIDRobotDrive41.reset(new RobotDrive(drivePIDLeftFront, drivePIDLeftBack,
              drivePIDRightFront, drivePIDRightBack));
    
    drivePIDRobotDrive41->SetSafetyEnabled(true);
        drivePIDRobotDrive41->SetExpiration(0.1);
        drivePIDRobotDrive41->SetSensitivity(0.5);
        drivePIDRobotDrive41->SetMaxOutput(1.0);

    hoodShortCylinder.reset(new Solenoid(0, hoodcylindershort));
    lw->AddActuator("Hood", "ShortCylinder", hoodShortCylinder);
    
    hoodLongCylinder.reset(new Solenoid(0, hoodcylinderlong));
    lw->AddActuator("Hood", "LongCylinder", hoodLongCylinder);
    
//    grappleClimbClimbRelease.reset(new Solenoid(0, climb));
//    lw->AddActuator("GrappleClimb", "ClimbRelease", grappleClimbClimbRelease);
    
    grappleClimbGrappleRelease.reset(new Solenoid(0, grapple));
    lw->AddActuator("GrappleClimb", "GrappleRelease", grappleClimbGrappleRelease);
    
    intakeMainIntake.reset(new CANTalon(CANTalon_primaryIntakeMotor));
    lw->AddActuator("Intake", "MainIntake", intakeMainIntake);
    
    intakeSecondIntake.reset(new CANTalon(CANTalon_secondaryIntakeMotor));
    lw->AddActuator("Intake", "SecondIntake", intakeSecondIntake);
    
    shooterTurretPIDTurretMotor.reset(new CANTalon(CANTalon_turretMotor));
    lw->AddActuator("ShooterTurretPID", "TurretMotor", shooterTurretPIDTurretMotor);
    
    shooterTurretPIDTurretAngle.reset(new AnalogInput(shooterTurretAngle));
    lw->AddSensor("ShooterTurretPID", "TurretAngle", shooterTurretPIDTurretAngle);
    
    shooterTurretPIDTurretPosition1.reset(new DigitalInput(shooterTurretPos1));
    lw->AddSensor("ShooterTurretPID", "TurretPosition1", shooterTurretPIDTurretPosition1);
    
    shooterTurretPIDTurretPosition2.reset(new DigitalInput(shooterTurretPos2));
    lw->AddSensor("ShooterTurretPID", "TurretPosition2", shooterTurretPIDTurretPosition2);
    
    shooterTurretPIDTurretPosition3.reset(new DigitalInput(shooterTurretPos3));
    lw->AddSensor("ShooterTurretPID", "TurretPosition3", shooterTurretPIDTurretPosition3);
    
    shooterWheelPIDShooter1.reset(new CANTalon(CANTalon_shooterMotor1));
    lw->AddActuator("ShooterWheelPID", "Shooter1", shooterWheelPIDShooter1);
    
    shooterWheelPIDNoUseEncoder.reset(new Encoder(6, 8, false, Encoder::k4X));
    lw->AddSensor("ShooterWheelPID", "NoUseEncoder", shooterWheelPIDNoUseEncoder);
    shooterWheelPIDNoUseEncoder->SetDistancePerPulse(1.0);
    shooterWheelPIDNoUseEncoder->SetPIDSourceType(PIDSourceType::kRate);
    shooterWheelPIDSpeedCounter.reset(new Counter(wheelSpeedCounter));
    lw->AddSensor("ShooterWheelPID", "SpeedCounter", shooterWheelPIDSpeedCounter);
    
    shooterWheelPIDShooter2.reset(new CANTalon(CANTalon_shooterMotor2));
    lw->AddActuator("ShooterWheelPID", "Shooter2", shooterWheelPIDShooter2);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    climbMotor1.reset(new CANTalon(CANTalon_climbMotor1));
    climbMotor2.reset(new CANTalon(CANTalon_climbMotor2));

    intakeBallDetector.reset(new DigitalInput(ballDetectorSensor));

    armPIDArmMotorLeft.reset(new CANTalon(CANTalon_armMotorLeft));
    lw->AddActuator("ArmPID", "ArmMotorLeft", armPIDArmMotorLeft);

    intakeBallRelease.reset(new Solenoid(0, shooterballrelease));
    lw->AddActuator("Intake", "BallRelease", intakeBallRelease);

    shooterTurretPIDTurretCylinder.reset(new Solenoid(0, turretcylinder));
    lw->AddActuator("ShooterTurretPID", "TurretCylinder", shooterTurretPIDTurretCylinder);

    hoodLockingCylinder.reset(new Solenoid(0, lockingCylinder));
    lw->AddActuator("Hood", "LockingCylinder", hoodLockingCylinder);


    m_gyro.reset(new AHRS(SerialPort::kMXP));

    lightOutput1.reset(new Solenoid(redLight));
    lightOutput2.reset(new Solenoid(greenLight));
}
