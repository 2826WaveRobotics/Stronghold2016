// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<Servo> RobotMap::climberClimbServo1;
std::shared_ptr<Servo> RobotMap::climberClimbServo2;
std::shared_ptr<CANTalon> RobotMap::intakeIntakeMotor;
std::shared_ptr<Encoder> RobotMap::drivePIDDriveEncoder;
std::shared_ptr<CANTalon> RobotMap::drivePIDLeftBack;
std::shared_ptr<CANTalon> RobotMap::drivePIDRightBack;
std::shared_ptr<CANTalon> RobotMap::drivePIDLeftFront;
std::shared_ptr<CANTalon> RobotMap::drivePIDRightFront;
std::shared_ptr<RobotDrive> RobotMap::drivePIDRobotDrive41;
std::shared_ptr<CANTalon> RobotMap::armPIDArmMotorRight;
std::shared_ptr<CANTalon> RobotMap::armPIDArmMotorLeft;
std::shared_ptr<Encoder> RobotMap::armPIDArmPosition;
std::shared_ptr<CANTalon> RobotMap::shooterWheelsShooter2;
std::shared_ptr<CANTalon> RobotMap::shooterWheelsShooter1;
std::shared_ptr<Encoder> RobotMap::shooterHeadPIDShooterPosition;
std::shared_ptr<CANTalon> RobotMap::shooterHeadPIDTrajectory;
std::shared_ptr<CANTalon> RobotMap::shooterHeadPIDStaging;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

std::shared_ptr<AHRS> RobotMap::m_gyro;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    climberClimbServo1.reset(new Servo(0));
    lw->AddActuator("Climber", "ClimbServo1", climberClimbServo1);
    
    climberClimbServo2.reset(new Servo(1));
    lw->AddActuator("Climber", "ClimbServo2", climberClimbServo2);
    
    intakeIntakeMotor.reset(new CANTalon(6));
    lw->AddActuator("Intake", "IntakeMotor", intakeIntakeMotor);
    
    drivePIDDriveEncoder.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("DrivePID", "DriveEncoder", drivePIDDriveEncoder);
    drivePIDDriveEncoder->SetDistancePerPulse(1.0);
    drivePIDDriveEncoder->SetPIDSourceType(PIDSourceType::kRate);
    drivePIDLeftBack.reset(new CANTalon(1));
    lw->AddActuator("DrivePID", "LeftBack", drivePIDLeftBack);
    
    drivePIDRightBack.reset(new CANTalon(3));
    lw->AddActuator("DrivePID", "RightBack", drivePIDRightBack);
    
    drivePIDLeftFront.reset(new CANTalon(2));
    lw->AddActuator("DrivePID", "LeftFront", drivePIDLeftFront);
    
    drivePIDRightFront.reset(new CANTalon(11));
    lw->AddActuator("DrivePID", "RightFront", drivePIDRightFront);
    
    drivePIDRobotDrive41.reset(new RobotDrive(drivePIDLeftFront, drivePIDLeftBack,
              drivePIDRightFront, drivePIDRightBack));
    
    drivePIDRobotDrive41->SetSafetyEnabled(true);
        drivePIDRobotDrive41->SetExpiration(0.1);
        drivePIDRobotDrive41->SetSensitivity(0.5);
        drivePIDRobotDrive41->SetMaxOutput(1.0);

    armPIDArmMotorRight.reset(new CANTalon(5));
    lw->AddActuator("ArmPID", "ArmMotorRight", armPIDArmMotorRight);
    
    armPIDArmMotorLeft.reset(new CANTalon(4));
    lw->AddActuator("ArmPID", "ArmMotorLeft", armPIDArmMotorLeft);
    
    armPIDArmPosition.reset(new Encoder(4, 5, false, Encoder::k4X));
    lw->AddSensor("ArmPID", "ArmPosition", armPIDArmPosition);
    armPIDArmPosition->SetDistancePerPulse(1.0);
    armPIDArmPosition->SetPIDSourceType(PIDSourceType::kRate);
    shooterWheelsShooter2.reset(new CANTalon(8));
    lw->AddActuator("ShooterWheels", "Shooter2", shooterWheelsShooter2);
    
    shooterWheelsShooter1.reset(new CANTalon(7));
    lw->AddActuator("ShooterWheels", "Shooter1", shooterWheelsShooter1);
    
    shooterHeadPIDShooterPosition.reset(new Encoder(2, 3, false, Encoder::k4X));
    lw->AddSensor("ShooterHeadPID", "ShooterPosition", shooterHeadPIDShooterPosition);
    shooterHeadPIDShooterPosition->SetDistancePerPulse(1.0);
    shooterHeadPIDShooterPosition->SetPIDSourceType(PIDSourceType::kRate);
    shooterHeadPIDTrajectory.reset(new CANTalon(9));
    lw->AddActuator("ShooterHeadPID", "Trajectory", shooterHeadPIDTrajectory);
    
    shooterHeadPIDStaging.reset(new CANTalon(10));
    lw->AddActuator("ShooterHeadPID", "Staging", shooterHeadPIDStaging);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    m_gyro.reset(new AHRS(SerialPort::kMXP));
}
